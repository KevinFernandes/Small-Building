{
    "pipes": [],
    "interfaces": [
        {
            "name": "IFloorInfo",
            "id": "interface-IFloorInfo-12fb243e6e97c2a8caea90bdbddd3c4a",
            "file": "src/app/models/floor-info.ts",
            "type": "interface",
            "sourceCode": "import { Guid } from 'guid-typescript';\r\nimport { FloorSlot } from './floor-slot';\r\nimport { FloorType } from './floor-type.enum';\r\n\r\nexport interface IFloorInfo {\r\n    floorName: string;\r\n    floorType: FloorType;\r\n    slots: Array<FloorSlot>;\r\n}\r\n\r\nexport abstract class FloorInfo implements IFloorInfo {\r\n    floorId: string;\r\n    floorName: string;\r\n    floorType: FloorType;\r\n    slots: Array<FloorSlot>;\r\n    buildStart: number;\r\n\r\n    constructor(floorName: string, floorType: FloorType, slots: number) {\r\n        this.floorId = Guid.raw();\r\n        this.floorName = floorName;\r\n        this.floorType = floorType;\r\n        this.slots = [];\r\n        this.buildStart = 30000; // 30 seconds\r\n\r\n        for (let i = 0; i < slots; ++i) {\r\n            this.slots.push(new FloorSlot());\r\n        }\r\n    }\r\n\r\n    public tick(): void {\r\n        if (this.buildStart > 0) {\r\n            this.buildStart -= 1;\r\n        }\r\n    }\r\n}\r\n\r\nexport class LobbyFloorInfo extends FloorInfo {\r\n    constructor() {\r\n        super('Lobby', FloorType.Lobby, 0);\r\n        this.buildStart = 0;\r\n    }\r\n}\r\n\r\nexport class EmptyFloorInfo extends FloorInfo {\r\n    constructor() {\r\n        super('Empty floor', FloorType.Empty, 0);\r\n        this.buildStart = 0;\r\n    }\r\n}\r\n\r\nexport class ResidentialFloorInfo extends FloorInfo {\r\n    constructor(floorName: string) {\r\n        super(floorName, FloorType.Residential, 5);\r\n    }\r\n}\r\n\r\nexport class RetailFloorInfo extends FloorInfo {\r\n    constructor(floorName: string) {\r\n        super(floorName, FloorType.Retail, 3);\r\n    }\r\n}\r\n\r\nexport class RecreationFloorInfo extends FloorInfo {\r\n    constructor(floorName: string) {\r\n        super(floorName, FloorType.Recreational, 3);\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "floorName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "floorType",
                    "type": "FloorType",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "slots",
                    "type": "Array<FloorSlot>",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ApplicationState",
            "id": "injectable-ApplicationState-25f25810de0382da943a0b720bd2825d",
            "file": "src/app/store/app.state.ts",
            "properties": [
                {
                    "name": "recreationalFloors",
                    "defaultValue": "new RecreationalFloors()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "residentialFloors",
                    "defaultValue": "new ResidentialFloors()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "retailFloors",
                    "defaultValue": "new RetailFloors()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addFloor",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ApplicationStateModel>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "description": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "AddFloor"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ApplicationStateModel>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllFloors",
                    "args": [
                        {
                            "name": "state",
                            "type": "ApplicationStateModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "Floor[]",
                    "typeParameters": [],
                    "line": 62,
                    "description": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1814,
                                "end": 1819,
                                "flags": 0,
                                "escapedText": "state"
                            },
                            "type": "ApplicationStateModel",
                            "tagName": {
                                "pos": 1808,
                                "end": 1813,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>the application state to use to rerieve the data</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "makeRecreational",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ApplicationStateModel>"
                        },
                        {
                            "name": "action",
                            "type": "MakeRecreational"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "MakeRecreational"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ApplicationStateModel>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "MakeRecreational",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "makeResidential",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ApplicationStateModel>"
                        },
                        {
                            "name": "action",
                            "type": "MakeResidential"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "MakeResidential"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ApplicationStateModel>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "MakeResidential",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "makeRetail",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ApplicationStateModel>"
                        },
                        {
                            "name": "action",
                            "type": "MakeRetail"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "MakeRetail"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ApplicationStateModel>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "MakeRetail",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveFloorDown",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ApplicationStateModel>"
                        },
                        {
                            "name": "action",
                            "type": "MoveFloorDown"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "MoveFloorDown"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ApplicationStateModel>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "MoveFloorDown",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveFloorUp",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ApplicationStateModel>"
                        },
                        {
                            "name": "action",
                            "type": "MoveFloorUp"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "MoveFloorUp"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ApplicationStateModel>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "MoveFloorUp",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "timerTick",
                    "args": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ApplicationStateModel>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "TimerTick"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ctx",
                            "type": "StateContext<ApplicationStateModel>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "<p>NgSX state manager\nthis class describes the entire state to the application,\nwhat actions can be performed, what &quot;slices&quot; or selections of the\nstate the the aplication can get.</p>\n<p>The @State attribute describes to NgSX, that this is a state that\nit should manage</p>\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { Floor } from '../models/floor';\r\nimport { FloorInfo } from '../models/floor-info';\r\nimport { FloorType } from '../models/floor-type.enum';\r\nimport {\r\n  RecreationalFloors,\r\n  ResidentialFloors,\r\n  RetailFloors,\r\n} from '../models/floors';\r\nimport {\r\n  MakeRecreational,\r\n  MakeResidential,\r\n  MakeRetail,\r\n  MoveFloorDown,\r\n  MoveFloorUp,\r\n} from './floor-toolbar.actions';\r\nimport { TimerTick } from './tick.actions';\r\nimport { AddFloor } from './toolbar.actions';\r\n\r\n/**\r\n *  The state model for the application\r\n * these are the properties for the entire application\r\n * there is the possibility to support sub-states which would\r\n * be independent states that the application needs to handle\r\n * Currently we do not need sub-states\r\n */\r\nexport class ApplicationStateModel {\r\n  /**\r\n   * The current floors in the tower\r\n   */\r\n  floors: Array<Floor> = [Floor.makeLobbyFloor()];\r\n}\r\n\r\n/**\r\n *  NgSX state manager\r\n * this class describes the entire state to the application,\r\n * what actions can be performed, what \"slices\" or selections of the\r\n * state the the aplication can get.\r\n *\r\n * The @State attribute describes to NgSX, that this is a state that\r\n * it should manage\r\n */\r\n@State<ApplicationStateModel>({\r\n  name: 'appstate',\r\n  defaults: new ApplicationStateModel(),\r\n})\r\n@Injectable()\r\nexport class ApplicationState {\r\n  private residentialFloors = new ResidentialFloors();\r\n  private retailFloors = new RetailFloors();\r\n  private recreationalFloors = new RecreationalFloors();\r\n\r\n  /**\r\n   * @Selector - tells NGSX that this is a selector method that will return\r\n   * slices of the state\r\n   *\r\n   * This method returns all the floors currently in the tower\r\n   * @param state - the application state to use to rerieve the data\r\n   */\r\n  @Selector()\r\n  static getAllFloors(state: ApplicationStateModel): Floor[] {\r\n    return state.floors;\r\n  }\r\n\r\n  @Action(TimerTick)\r\n  timerTick(ctx: StateContext<ApplicationStateModel>): void {\r\n    const state = ctx.getState().floors;\r\n\r\n    if (state) {\r\n      state.forEach((floor) => floor.tick());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @Action - tells NGSX that this is an action that can be performed on the state\r\n   *\r\n   * This Action adds a floor to the towers list of floors\r\n   * @param - This parameter destructures the StateContext of the ApplicationStateModel into\r\n   * patchState and getState methods.\r\n   */\r\n  @Action(AddFloor)\r\n  addFloor(ctx: StateContext<ApplicationStateModel>): void {\r\n    //  we use the destructured \"getState()\" method to retrieve the current list of floors\r\n    //  from the application state\r\n    const state = ctx.getState().floors;\r\n\r\n    //  To keep this method \"functional\", we do not modify the floors directly\r\n    //  instead we create a new array adding the new floor\r\n    const floor = Floor.makeEmptyFloor();\r\n    floor.ID = state.length;\r\n    const floors = [...state, floor];\r\n\r\n    //  then we call the destructured \"patchState()\" method to update the floors\r\n    ctx.patchState({\r\n      floors,\r\n    });\r\n  }\r\n\r\n  @Action(MakeResidential)\r\n  makeResidential(\r\n    ctx: StateContext<ApplicationStateModel>,\r\n    action: MakeResidential\r\n  ): void {\r\n    const state = ctx.getState().floors;\r\n    const info: FloorInfo = this.residentialFloors.randomFloor(\r\n      FloorType.Residential,\r\n      state\r\n    );\r\n\r\n    if (!info) {\r\n      return;\r\n    }\r\n\r\n    const floor = state.find((fl) => fl.floorID === action.floorID);\r\n    if (floor) {\r\n      floor.buildFloor(info);\r\n    }\r\n    ctx.patchState({\r\n      floors: state,\r\n    });\r\n  }\r\n\r\n  @Action(MakeRetail)\r\n  makeRetail(\r\n    ctx: StateContext<ApplicationStateModel>,\r\n    action: MakeRetail\r\n  ): void {\r\n    const state = ctx.getState().floors;\r\n    const info: FloorInfo = this.retailFloors.randomFloor(\r\n      FloorType.Retail,\r\n      state\r\n    );\r\n\r\n    if (!info) {\r\n      return;\r\n    }\r\n\r\n    const floor = state.find((fl) => fl.floorID === action.floorID);\r\n    if (floor) {\r\n      floor.buildFloor(info);\r\n    }\r\n    ctx.patchState({\r\n      floors: state,\r\n    });\r\n  }\r\n\r\n  @Action(MakeRecreational)\r\n  makeRecreational(\r\n    ctx: StateContext<ApplicationStateModel>,\r\n    action: MakeRecreational\r\n  ): void {\r\n    const state = ctx.getState().floors;\r\n    const info: FloorInfo = this.recreationalFloors.randomFloor(\r\n      FloorType.Recreational,\r\n      state\r\n    );\r\n\r\n    if (!info) {\r\n      return;\r\n    }\r\n\r\n    const floor = state.find((fl) => fl.floorID === action.floorID);\r\n    if (floor) {\r\n      floor.buildFloor(info);\r\n    }\r\n    ctx.patchState({\r\n      floors: state,\r\n    });\r\n  }\r\n\r\n  @Action(MoveFloorUp)\r\n  moveFloorUp(\r\n    ctx: StateContext<ApplicationStateModel>,\r\n    action: MoveFloorUp\r\n  ): void {\r\n    const state = ctx.getState().floors;\r\n\r\n    //  we assume that the index will be valid\r\n    const index = state.findIndex((floor) => floor.floorID === action.floorID);\r\n\r\n    //  can't replace the lobby so just return\r\n    if (index - 1 === 0) {\r\n      return;\r\n    }\r\n\r\n    [state[index - 1], state[index]] = [state[index], state[index - 1]];\r\n\r\n    state.forEach((floor, ind) => (floor.ID = ind));\r\n\r\n    ctx.patchState({\r\n      floors: state,\r\n    });\r\n  }\r\n\r\n  @Action(MoveFloorDown)\r\n  moveFloorDown(\r\n    ctx: StateContext<ApplicationStateModel>,\r\n    action: MoveFloorDown\r\n  ): void {\r\n    const state = ctx.getState().floors;\r\n\r\n    //  we assume that the index will be valid\r\n    const index = state.findIndex((floor) => floor.floorID === action.floorID);\r\n\r\n    //  can't go off the tower so return\r\n    if (index + 1 >= state.length) {\r\n      return;\r\n    }\r\n\r\n    [state[index + 1], state[index]] = [state[index], state[index + 1]];\r\n\r\n    state.forEach((floor, ind) => (floor.ID = ind));\r\n\r\n    ctx.patchState({\r\n      floors: state,\r\n    });\r\n  }\r\n}\r\n",
            "type": "injectable"
        },
        {
            "name": "AppTimerService",
            "id": "injectable-AppTimerService-9774ffe7c475144c5e83ea23c1dffc4a",
            "file": "src/app/services/app-timer/app-timer.service.ts",
            "properties": [
                {
                    "name": "timer$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store } from '@ngxs/store';\nimport { Observable, timer } from 'rxjs';\nimport { share } from 'rxjs/operators';\nimport { TimerTick } from 'src/app/store/tick.actions';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppTimerService {\n\n  private timer$: Observable<number>;\n  constructor(private store: Store) {\n    this.timer$ = timer(0, 1000).pipe(share());\n    this.timer$.subscribe(() => {\n      store.dispatch(new TimerTick());\n    });\n  }\n\n  public get Timer$(): Observable<number> {\n    return this.timer$;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "Timer$": {
                    "name": "Timer$",
                    "getSignature": {
                        "name": "Timer$",
                        "type": "",
                        "returnType": "Observable<number>",
                        "line": 20
                    }
                }
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AddFloor",
            "id": "class-AddFloor-c93fe55f893d899cb53412ad6b70ae65",
            "file": "src/app/store/toolbar.actions.ts",
            "type": "class",
            "sourceCode": "export class AddFloor {\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[toolbar] add floor';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor() {\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Default constructor, currently no parameters.</p>\n",
                "args": [],
                "line": 14
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[toolbar] add floor'",
                    "type": "string",
                    "optional": false,
                    "description": "<p>this is required by NGSX?? to identify the action</p>\n",
                    "line": 14,
                    "modifierKind": [
                        115,
                        132
                    ]
                }
            ],
            "description": "<p>This file contains the list of NGSX actions that can happen off the main\napplication toolbar</p>\n",
            "rawdescription": "This file contains the list of NGSX actions that can happen off the main\r\napplication toolbar",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AllFloors",
            "id": "class-AllFloors-85a0fc7946f7d92b68e497a67b219d47",
            "file": "src/app/models/floors.ts",
            "type": "class",
            "sourceCode": "import { Floor } from './floor';\r\nimport { FloorInfo, RecreationFloorInfo, ResidentialFloorInfo, RetailFloorInfo } from './floor-info';\r\nimport { FloorType } from './floor-type.enum';\r\n\r\nexport abstract class Floors {\r\n  public floors: Array<FloorInfo> = [];\r\n\r\n  public randomFloor(\r\n    floorType: FloorType,\r\n    excludes: Array<Floor> = []\r\n  ): FloorInfo {\r\n    const IDs = excludes\r\n      .filter((floor) => floor.floorInfo.floorType === floorType)\r\n      .map((floor) => floor.floorInfo.floorId);\r\n    const floors = this.floors.filter(\r\n      (floorInfo: FloorInfo) => IDs.indexOf(floorInfo.floorId) < 0\r\n    );\r\n\r\n    if (!floors || floors.length <= 0) {\r\n      return null;\r\n    }\r\n\r\n    return floors[this.getRandom(0, floors.length)];\r\n  }\r\n\r\n  private getRandom(min: number, max: number): number {\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n  }\r\n}\r\n\r\nexport class AllFloors {\r\n  private static resFloors: Array<FloorInfo> = null;\r\n  private static retailFloors: Array<FloorInfo> = null;\r\n  private static recreationFloors: Array<FloorInfo> = null;\r\n\r\n  public static ResidentialFloors(): Array<FloorInfo> {\r\n    if (!this.resFloors) {\r\n      this.resFloors = [];\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 1'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 2'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 3'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 4'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 5'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 6'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 7'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 8'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 9'));\r\n    }\r\n\r\n    return this.resFloors;\r\n  }\r\n\r\n  public static RetailFloors(): Array<FloorInfo> {\r\n    if (!this.retailFloors) {\r\n      this.retailFloors = [];\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 1'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 2'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 3'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 4'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 5'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 6'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 7'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 8'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 9'));\r\n    }\r\n\r\n    return this.retailFloors;\r\n  }\r\n\r\n  public static RecreationalFloors(): Array<FloorInfo> {\r\n    if (!this.recreationFloors) {\r\n      this.recreationFloors = [];\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 1'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 2'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 3'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 4'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 5'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 6'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 7'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 8'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 9'));\r\n    }\r\n\r\n    return this.recreationFloors;\r\n  }\r\n}\r\n\r\nexport class ResidentialFloors extends Floors {\r\n  constructor() {\r\n    super();\r\n\r\n    this.floors = AllFloors.ResidentialFloors();\r\n\r\n  }\r\n}\r\n\r\nexport class RetailFloors extends Floors {\r\n  constructor() {\r\n    super();\r\n\r\n    this.floors = AllFloors.RetailFloors();\r\n  }\r\n\r\n}\r\n\r\nexport class RecreationalFloors extends Floors {\r\n  constructor() {\r\n    super();\r\n\r\n    this.floors = AllFloors.RecreationalFloors();\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "recreationFloors",
                    "defaultValue": "null",
                    "type": "Array<FloorInfo>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        112,
                        115
                    ]
                },
                {
                    "name": "resFloors",
                    "defaultValue": "null",
                    "type": "Array<FloorInfo>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        112,
                        115
                    ]
                },
                {
                    "name": "retailFloors",
                    "defaultValue": "null",
                    "type": "Array<FloorInfo>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        112,
                        115
                    ]
                }
            ],
            "methods": [
                {
                    "name": "RecreationalFloors",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<FloorInfo>",
                    "typeParameters": [],
                    "line": 70,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "ResidentialFloors",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<FloorInfo>",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "RetailFloors",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<FloorInfo>",
                    "typeParameters": [],
                    "line": 53,
                    "modifierKind": [
                        115
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ApplicationStateModel",
            "id": "class-ApplicationStateModel-25f25810de0382da943a0b720bd2825d",
            "file": "src/app/store/app.state.ts",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { Floor } from '../models/floor';\r\nimport { FloorInfo } from '../models/floor-info';\r\nimport { FloorType } from '../models/floor-type.enum';\r\nimport {\r\n  RecreationalFloors,\r\n  ResidentialFloors,\r\n  RetailFloors,\r\n} from '../models/floors';\r\nimport {\r\n  MakeRecreational,\r\n  MakeResidential,\r\n  MakeRetail,\r\n  MoveFloorDown,\r\n  MoveFloorUp,\r\n} from './floor-toolbar.actions';\r\nimport { TimerTick } from './tick.actions';\r\nimport { AddFloor } from './toolbar.actions';\r\n\r\n/**\r\n *  The state model for the application\r\n * these are the properties for the entire application\r\n * there is the possibility to support sub-states which would\r\n * be independent states that the application needs to handle\r\n * Currently we do not need sub-states\r\n */\r\nexport class ApplicationStateModel {\r\n  /**\r\n   * The current floors in the tower\r\n   */\r\n  floors: Array<Floor> = [Floor.makeLobbyFloor()];\r\n}\r\n\r\n/**\r\n *  NgSX state manager\r\n * this class describes the entire state to the application,\r\n * what actions can be performed, what \"slices\" or selections of the\r\n * state the the aplication can get.\r\n *\r\n * The @State attribute describes to NgSX, that this is a state that\r\n * it should manage\r\n */\r\n@State<ApplicationStateModel>({\r\n  name: 'appstate',\r\n  defaults: new ApplicationStateModel(),\r\n})\r\n@Injectable()\r\nexport class ApplicationState {\r\n  private residentialFloors = new ResidentialFloors();\r\n  private retailFloors = new RetailFloors();\r\n  private recreationalFloors = new RecreationalFloors();\r\n\r\n  /**\r\n   * @Selector - tells NGSX that this is a selector method that will return\r\n   * slices of the state\r\n   *\r\n   * This method returns all the floors currently in the tower\r\n   * @param state - the application state to use to rerieve the data\r\n   */\r\n  @Selector()\r\n  static getAllFloors(state: ApplicationStateModel): Floor[] {\r\n    return state.floors;\r\n  }\r\n\r\n  @Action(TimerTick)\r\n  timerTick(ctx: StateContext<ApplicationStateModel>): void {\r\n    const state = ctx.getState().floors;\r\n\r\n    if (state) {\r\n      state.forEach((floor) => floor.tick());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @Action - tells NGSX that this is an action that can be performed on the state\r\n   *\r\n   * This Action adds a floor to the towers list of floors\r\n   * @param - This parameter destructures the StateContext of the ApplicationStateModel into\r\n   * patchState and getState methods.\r\n   */\r\n  @Action(AddFloor)\r\n  addFloor(ctx: StateContext<ApplicationStateModel>): void {\r\n    //  we use the destructured \"getState()\" method to retrieve the current list of floors\r\n    //  from the application state\r\n    const state = ctx.getState().floors;\r\n\r\n    //  To keep this method \"functional\", we do not modify the floors directly\r\n    //  instead we create a new array adding the new floor\r\n    const floor = Floor.makeEmptyFloor();\r\n    floor.ID = state.length;\r\n    const floors = [...state, floor];\r\n\r\n    //  then we call the destructured \"patchState()\" method to update the floors\r\n    ctx.patchState({\r\n      floors,\r\n    });\r\n  }\r\n\r\n  @Action(MakeResidential)\r\n  makeResidential(\r\n    ctx: StateContext<ApplicationStateModel>,\r\n    action: MakeResidential\r\n  ): void {\r\n    const state = ctx.getState().floors;\r\n    const info: FloorInfo = this.residentialFloors.randomFloor(\r\n      FloorType.Residential,\r\n      state\r\n    );\r\n\r\n    if (!info) {\r\n      return;\r\n    }\r\n\r\n    const floor = state.find((fl) => fl.floorID === action.floorID);\r\n    if (floor) {\r\n      floor.buildFloor(info);\r\n    }\r\n    ctx.patchState({\r\n      floors: state,\r\n    });\r\n  }\r\n\r\n  @Action(MakeRetail)\r\n  makeRetail(\r\n    ctx: StateContext<ApplicationStateModel>,\r\n    action: MakeRetail\r\n  ): void {\r\n    const state = ctx.getState().floors;\r\n    const info: FloorInfo = this.retailFloors.randomFloor(\r\n      FloorType.Retail,\r\n      state\r\n    );\r\n\r\n    if (!info) {\r\n      return;\r\n    }\r\n\r\n    const floor = state.find((fl) => fl.floorID === action.floorID);\r\n    if (floor) {\r\n      floor.buildFloor(info);\r\n    }\r\n    ctx.patchState({\r\n      floors: state,\r\n    });\r\n  }\r\n\r\n  @Action(MakeRecreational)\r\n  makeRecreational(\r\n    ctx: StateContext<ApplicationStateModel>,\r\n    action: MakeRecreational\r\n  ): void {\r\n    const state = ctx.getState().floors;\r\n    const info: FloorInfo = this.recreationalFloors.randomFloor(\r\n      FloorType.Recreational,\r\n      state\r\n    );\r\n\r\n    if (!info) {\r\n      return;\r\n    }\r\n\r\n    const floor = state.find((fl) => fl.floorID === action.floorID);\r\n    if (floor) {\r\n      floor.buildFloor(info);\r\n    }\r\n    ctx.patchState({\r\n      floors: state,\r\n    });\r\n  }\r\n\r\n  @Action(MoveFloorUp)\r\n  moveFloorUp(\r\n    ctx: StateContext<ApplicationStateModel>,\r\n    action: MoveFloorUp\r\n  ): void {\r\n    const state = ctx.getState().floors;\r\n\r\n    //  we assume that the index will be valid\r\n    const index = state.findIndex((floor) => floor.floorID === action.floorID);\r\n\r\n    //  can't replace the lobby so just return\r\n    if (index - 1 === 0) {\r\n      return;\r\n    }\r\n\r\n    [state[index - 1], state[index]] = [state[index], state[index - 1]];\r\n\r\n    state.forEach((floor, ind) => (floor.ID = ind));\r\n\r\n    ctx.patchState({\r\n      floors: state,\r\n    });\r\n  }\r\n\r\n  @Action(MoveFloorDown)\r\n  moveFloorDown(\r\n    ctx: StateContext<ApplicationStateModel>,\r\n    action: MoveFloorDown\r\n  ): void {\r\n    const state = ctx.getState().floors;\r\n\r\n    //  we assume that the index will be valid\r\n    const index = state.findIndex((floor) => floor.floorID === action.floorID);\r\n\r\n    //  can't go off the tower so return\r\n    if (index + 1 >= state.length) {\r\n      return;\r\n    }\r\n\r\n    [state[index + 1], state[index]] = [state[index], state[index + 1]];\r\n\r\n    state.forEach((floor, ind) => (floor.ID = ind));\r\n\r\n    ctx.patchState({\r\n      floors: state,\r\n    });\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "floors",
                    "defaultValue": "[Floor.makeLobbyFloor()]",
                    "type": "Array<Floor>",
                    "optional": false,
                    "description": "<p>The current floors in the tower</p>\n",
                    "line": 32
                }
            ],
            "description": "<p>The state model for the application\nthese are the properties for the entire application\nthere is the possibility to support sub-states which would\nbe independent states that the application needs to handle\nCurrently we do not need sub-states</p>\n",
            "rawdescription": "The state model for the application\r\nthese are the properties for the entire application\r\nthere is the possibility to support sub-states which would\r\nbe independent states that the application needs to handle\r\nCurrently we do not need sub-states",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-ee2067dfb1c303f41003aea7d82d51e0",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EmptyFloorInfo",
            "id": "class-EmptyFloorInfo-12fb243e6e97c2a8caea90bdbddd3c4a",
            "file": "src/app/models/floor-info.ts",
            "type": "class",
            "sourceCode": "import { Guid } from 'guid-typescript';\r\nimport { FloorSlot } from './floor-slot';\r\nimport { FloorType } from './floor-type.enum';\r\n\r\nexport interface IFloorInfo {\r\n    floorName: string;\r\n    floorType: FloorType;\r\n    slots: Array<FloorSlot>;\r\n}\r\n\r\nexport abstract class FloorInfo implements IFloorInfo {\r\n    floorId: string;\r\n    floorName: string;\r\n    floorType: FloorType;\r\n    slots: Array<FloorSlot>;\r\n    buildStart: number;\r\n\r\n    constructor(floorName: string, floorType: FloorType, slots: number) {\r\n        this.floorId = Guid.raw();\r\n        this.floorName = floorName;\r\n        this.floorType = floorType;\r\n        this.slots = [];\r\n        this.buildStart = 30000; // 30 seconds\r\n\r\n        for (let i = 0; i < slots; ++i) {\r\n            this.slots.push(new FloorSlot());\r\n        }\r\n    }\r\n\r\n    public tick(): void {\r\n        if (this.buildStart > 0) {\r\n            this.buildStart -= 1;\r\n        }\r\n    }\r\n}\r\n\r\nexport class LobbyFloorInfo extends FloorInfo {\r\n    constructor() {\r\n        super('Lobby', FloorType.Lobby, 0);\r\n        this.buildStart = 0;\r\n    }\r\n}\r\n\r\nexport class EmptyFloorInfo extends FloorInfo {\r\n    constructor() {\r\n        super('Empty floor', FloorType.Empty, 0);\r\n        this.buildStart = 0;\r\n    }\r\n}\r\n\r\nexport class ResidentialFloorInfo extends FloorInfo {\r\n    constructor(floorName: string) {\r\n        super(floorName, FloorType.Residential, 5);\r\n    }\r\n}\r\n\r\nexport class RetailFloorInfo extends FloorInfo {\r\n    constructor(floorName: string) {\r\n        super(floorName, FloorType.Retail, 3);\r\n    }\r\n}\r\n\r\nexport class RecreationFloorInfo extends FloorInfo {\r\n    constructor(floorName: string) {\r\n        super(floorName, FloorType.Recreational, 3);\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 44
            },
            "properties": [
                {
                    "name": "buildStart",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                },
                {
                    "name": "floorId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                },
                {
                    "name": "floorName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                },
                {
                    "name": "floorType",
                    "type": "FloorType",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                },
                {
                    "name": "slots",
                    "type": "Array<FloorSlot>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                }
            ],
            "methods": [
                {
                    "name": "tick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "FloorInfo",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Floor",
            "id": "class-Floor-aa51fde7acacb704059ff4d5cd3f22e1",
            "file": "src/app/models/floor.ts",
            "type": "class",
            "sourceCode": "import { Guid } from 'guid-typescript';\r\nimport { EmptyFloorInfo, FloorInfo, LobbyFloorInfo } from './floor-info';\r\n\r\nexport class Floor {\r\n    ID = 0;\r\n    floorID: string;\r\n    floorInfo: FloorInfo;\r\n\r\n    static makeLobbyFloor(): Floor {\r\n        return new Floor(new LobbyFloorInfo());\r\n    }\r\n\r\n    static makeEmptyFloor(): Floor {\r\n        return new Floor(new EmptyFloorInfo());\r\n    }\r\n\r\n    constructor(floorInfo: FloorInfo) {\r\n        this.floorInfo = floorInfo;\r\n        this.floorID = Guid.raw();\r\n    }\r\n\r\n    tick(): void {\r\n        if (this.floorInfo) {\r\n            this.floorInfo.tick();\r\n        }\r\n    }\r\n\r\n    buildFloor(floorInfo: FloorInfo): void {\r\n        this.floorInfo = floorInfo;\r\n    }\r\n\r\n    complete(): void {\r\n        if (this.floorInfo) {\r\n            this.floorInfo.buildStart = 0;\r\n        }\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "floorInfo",
                        "type": "FloorInfo"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "floorInfo",
                        "type": "FloorInfo",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "floorID",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "floorInfo",
                    "type": "FloorInfo",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "ID",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [
                {
                    "name": "buildFloor",
                    "args": [
                        {
                            "name": "floorInfo",
                            "type": "FloorInfo"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "floorInfo",
                            "type": "FloorInfo",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "complete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "makeEmptyFloor",
                    "args": [],
                    "optional": false,
                    "returnType": "Floor",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "makeLobbyFloor",
                    "args": [],
                    "optional": false,
                    "returnType": "Floor",
                    "typeParameters": [],
                    "line": 9,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "tick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FloorInfo",
            "id": "class-FloorInfo-12fb243e6e97c2a8caea90bdbddd3c4a",
            "file": "src/app/models/floor-info.ts",
            "type": "class",
            "sourceCode": "import { Guid } from 'guid-typescript';\r\nimport { FloorSlot } from './floor-slot';\r\nimport { FloorType } from './floor-type.enum';\r\n\r\nexport interface IFloorInfo {\r\n    floorName: string;\r\n    floorType: FloorType;\r\n    slots: Array<FloorSlot>;\r\n}\r\n\r\nexport abstract class FloorInfo implements IFloorInfo {\r\n    floorId: string;\r\n    floorName: string;\r\n    floorType: FloorType;\r\n    slots: Array<FloorSlot>;\r\n    buildStart: number;\r\n\r\n    constructor(floorName: string, floorType: FloorType, slots: number) {\r\n        this.floorId = Guid.raw();\r\n        this.floorName = floorName;\r\n        this.floorType = floorType;\r\n        this.slots = [];\r\n        this.buildStart = 30000; // 30 seconds\r\n\r\n        for (let i = 0; i < slots; ++i) {\r\n            this.slots.push(new FloorSlot());\r\n        }\r\n    }\r\n\r\n    public tick(): void {\r\n        if (this.buildStart > 0) {\r\n            this.buildStart -= 1;\r\n        }\r\n    }\r\n}\r\n\r\nexport class LobbyFloorInfo extends FloorInfo {\r\n    constructor() {\r\n        super('Lobby', FloorType.Lobby, 0);\r\n        this.buildStart = 0;\r\n    }\r\n}\r\n\r\nexport class EmptyFloorInfo extends FloorInfo {\r\n    constructor() {\r\n        super('Empty floor', FloorType.Empty, 0);\r\n        this.buildStart = 0;\r\n    }\r\n}\r\n\r\nexport class ResidentialFloorInfo extends FloorInfo {\r\n    constructor(floorName: string) {\r\n        super(floorName, FloorType.Residential, 5);\r\n    }\r\n}\r\n\r\nexport class RetailFloorInfo extends FloorInfo {\r\n    constructor(floorName: string) {\r\n        super(floorName, FloorType.Retail, 3);\r\n    }\r\n}\r\n\r\nexport class RecreationFloorInfo extends FloorInfo {\r\n    constructor(floorName: string) {\r\n        super(floorName, FloorType.Recreational, 3);\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "floorName",
                        "type": "string"
                    },
                    {
                        "name": "floorType",
                        "type": "FloorType"
                    },
                    {
                        "name": "slots",
                        "type": "number"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "floorName",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "floorType",
                        "type": "FloorType",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "slots",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "buildStart",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "floorId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "floorName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "floorType",
                    "type": "FloorType",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "slots",
                    "type": "Array<FloorSlot>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "tick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IFloorInfo"
            ]
        },
        {
            "name": "Floors",
            "id": "class-Floors-85a0fc7946f7d92b68e497a67b219d47",
            "file": "src/app/models/floors.ts",
            "type": "class",
            "sourceCode": "import { Floor } from './floor';\r\nimport { FloorInfo, RecreationFloorInfo, ResidentialFloorInfo, RetailFloorInfo } from './floor-info';\r\nimport { FloorType } from './floor-type.enum';\r\n\r\nexport abstract class Floors {\r\n  public floors: Array<FloorInfo> = [];\r\n\r\n  public randomFloor(\r\n    floorType: FloorType,\r\n    excludes: Array<Floor> = []\r\n  ): FloorInfo {\r\n    const IDs = excludes\r\n      .filter((floor) => floor.floorInfo.floorType === floorType)\r\n      .map((floor) => floor.floorInfo.floorId);\r\n    const floors = this.floors.filter(\r\n      (floorInfo: FloorInfo) => IDs.indexOf(floorInfo.floorId) < 0\r\n    );\r\n\r\n    if (!floors || floors.length <= 0) {\r\n      return null;\r\n    }\r\n\r\n    return floors[this.getRandom(0, floors.length)];\r\n  }\r\n\r\n  private getRandom(min: number, max: number): number {\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n  }\r\n}\r\n\r\nexport class AllFloors {\r\n  private static resFloors: Array<FloorInfo> = null;\r\n  private static retailFloors: Array<FloorInfo> = null;\r\n  private static recreationFloors: Array<FloorInfo> = null;\r\n\r\n  public static ResidentialFloors(): Array<FloorInfo> {\r\n    if (!this.resFloors) {\r\n      this.resFloors = [];\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 1'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 2'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 3'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 4'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 5'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 6'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 7'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 8'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 9'));\r\n    }\r\n\r\n    return this.resFloors;\r\n  }\r\n\r\n  public static RetailFloors(): Array<FloorInfo> {\r\n    if (!this.retailFloors) {\r\n      this.retailFloors = [];\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 1'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 2'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 3'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 4'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 5'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 6'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 7'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 8'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 9'));\r\n    }\r\n\r\n    return this.retailFloors;\r\n  }\r\n\r\n  public static RecreationalFloors(): Array<FloorInfo> {\r\n    if (!this.recreationFloors) {\r\n      this.recreationFloors = [];\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 1'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 2'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 3'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 4'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 5'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 6'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 7'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 8'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 9'));\r\n    }\r\n\r\n    return this.recreationFloors;\r\n  }\r\n}\r\n\r\nexport class ResidentialFloors extends Floors {\r\n  constructor() {\r\n    super();\r\n\r\n    this.floors = AllFloors.ResidentialFloors();\r\n\r\n  }\r\n}\r\n\r\nexport class RetailFloors extends Floors {\r\n  constructor() {\r\n    super();\r\n\r\n    this.floors = AllFloors.RetailFloors();\r\n  }\r\n\r\n}\r\n\r\nexport class RecreationalFloors extends Floors {\r\n  constructor() {\r\n    super();\r\n\r\n    this.floors = AllFloors.RecreationalFloors();\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "floors",
                    "defaultValue": "[]",
                    "type": "Array<FloorInfo>",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getRandom",
                    "args": [
                        {
                            "name": "min",
                            "type": "number"
                        },
                        {
                            "name": "max",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "min",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "randomFloor",
                    "args": [
                        {
                            "name": "floorType",
                            "type": "FloorType"
                        },
                        {
                            "name": "excludes",
                            "type": "Array<Floor>",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "FloorInfo",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "floorType",
                            "type": "FloorType",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "excludes",
                            "type": "Array<Floor>",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FloorSlot",
            "id": "class-FloorSlot-afe775a2f1c8c40f972a0245bb21834c",
            "file": "src/app/models/floor-slot.ts",
            "type": "class",
            "sourceCode": "export class FloorSlot {\r\n    occupied: boolean;\r\n    constructor() {\r\n        this.occupied = false;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 3
            },
            "properties": [
                {
                    "name": "occupied",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LobbyFloorInfo",
            "id": "class-LobbyFloorInfo-12fb243e6e97c2a8caea90bdbddd3c4a",
            "file": "src/app/models/floor-info.ts",
            "type": "class",
            "sourceCode": "import { Guid } from 'guid-typescript';\r\nimport { FloorSlot } from './floor-slot';\r\nimport { FloorType } from './floor-type.enum';\r\n\r\nexport interface IFloorInfo {\r\n    floorName: string;\r\n    floorType: FloorType;\r\n    slots: Array<FloorSlot>;\r\n}\r\n\r\nexport abstract class FloorInfo implements IFloorInfo {\r\n    floorId: string;\r\n    floorName: string;\r\n    floorType: FloorType;\r\n    slots: Array<FloorSlot>;\r\n    buildStart: number;\r\n\r\n    constructor(floorName: string, floorType: FloorType, slots: number) {\r\n        this.floorId = Guid.raw();\r\n        this.floorName = floorName;\r\n        this.floorType = floorType;\r\n        this.slots = [];\r\n        this.buildStart = 30000; // 30 seconds\r\n\r\n        for (let i = 0; i < slots; ++i) {\r\n            this.slots.push(new FloorSlot());\r\n        }\r\n    }\r\n\r\n    public tick(): void {\r\n        if (this.buildStart > 0) {\r\n            this.buildStart -= 1;\r\n        }\r\n    }\r\n}\r\n\r\nexport class LobbyFloorInfo extends FloorInfo {\r\n    constructor() {\r\n        super('Lobby', FloorType.Lobby, 0);\r\n        this.buildStart = 0;\r\n    }\r\n}\r\n\r\nexport class EmptyFloorInfo extends FloorInfo {\r\n    constructor() {\r\n        super('Empty floor', FloorType.Empty, 0);\r\n        this.buildStart = 0;\r\n    }\r\n}\r\n\r\nexport class ResidentialFloorInfo extends FloorInfo {\r\n    constructor(floorName: string) {\r\n        super(floorName, FloorType.Residential, 5);\r\n    }\r\n}\r\n\r\nexport class RetailFloorInfo extends FloorInfo {\r\n    constructor(floorName: string) {\r\n        super(floorName, FloorType.Retail, 3);\r\n    }\r\n}\r\n\r\nexport class RecreationFloorInfo extends FloorInfo {\r\n    constructor(floorName: string) {\r\n        super(floorName, FloorType.Recreational, 3);\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 37
            },
            "properties": [
                {
                    "name": "buildStart",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                },
                {
                    "name": "floorId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                },
                {
                    "name": "floorName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                },
                {
                    "name": "floorType",
                    "type": "FloorType",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                },
                {
                    "name": "slots",
                    "type": "Array<FloorSlot>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                }
            ],
            "methods": [
                {
                    "name": "tick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "FloorInfo",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MakeRecreational",
            "id": "class-MakeRecreational-17ecf986074464ae8416fd56dc06acbd",
            "file": "src/app/store/floor-toolbar.actions.ts",
            "type": "class",
            "sourceCode": "import { FloorInfo } from '../models/floor-info';\r\n\r\nexport class MakeResidential {\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[floor-toolbar] makeResidential';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor(public floorID: string) {\r\n    }\r\n}\r\n\r\nexport class MakeRetail {\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[floor-toolbar] makeRetail';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor(public floorID: string) {\r\n    }\r\n}\r\n\r\nexport class MakeRecreational {\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[floor-toolbar] makeRecreational';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor(public floorID: string) {\r\n    }\r\n}\r\n\r\nexport class MoveFloorUp {\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[floor-toolbar] moveFloorUp';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor(public floorID: string) {\r\n    }\r\n}\r\n\r\nexport class MoveFloorDown{\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[floor-toolbar] moveFloorDown';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor(public floorID: string) {\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Default constructor, currently no parameters.</p>\n",
                "args": [
                    {
                        "name": "floorID",
                        "type": "string"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "floorID",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "floorID",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[floor-toolbar] makeRecreational'",
                    "type": "string",
                    "optional": false,
                    "description": "<p>this is required by NGSX?? to identify the action</p>\n",
                    "line": 33,
                    "modifierKind": [
                        115,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MakeResidential",
            "id": "class-MakeResidential-17ecf986074464ae8416fd56dc06acbd",
            "file": "src/app/store/floor-toolbar.actions.ts",
            "type": "class",
            "sourceCode": "import { FloorInfo } from '../models/floor-info';\r\n\r\nexport class MakeResidential {\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[floor-toolbar] makeResidential';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor(public floorID: string) {\r\n    }\r\n}\r\n\r\nexport class MakeRetail {\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[floor-toolbar] makeRetail';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor(public floorID: string) {\r\n    }\r\n}\r\n\r\nexport class MakeRecreational {\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[floor-toolbar] makeRecreational';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor(public floorID: string) {\r\n    }\r\n}\r\n\r\nexport class MoveFloorUp {\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[floor-toolbar] moveFloorUp';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor(public floorID: string) {\r\n    }\r\n}\r\n\r\nexport class MoveFloorDown{\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[floor-toolbar] moveFloorDown';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor(public floorID: string) {\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Default constructor, currently no parameters.</p>\n",
                "args": [
                    {
                        "name": "floorID",
                        "type": "string"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "floorID",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "floorID",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[floor-toolbar] makeResidential'",
                    "type": "string",
                    "optional": false,
                    "description": "<p>this is required by NGSX?? to identify the action</p>\n",
                    "line": 7,
                    "modifierKind": [
                        115,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MakeRetail",
            "id": "class-MakeRetail-17ecf986074464ae8416fd56dc06acbd",
            "file": "src/app/store/floor-toolbar.actions.ts",
            "type": "class",
            "sourceCode": "import { FloorInfo } from '../models/floor-info';\r\n\r\nexport class MakeResidential {\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[floor-toolbar] makeResidential';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor(public floorID: string) {\r\n    }\r\n}\r\n\r\nexport class MakeRetail {\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[floor-toolbar] makeRetail';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor(public floorID: string) {\r\n    }\r\n}\r\n\r\nexport class MakeRecreational {\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[floor-toolbar] makeRecreational';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor(public floorID: string) {\r\n    }\r\n}\r\n\r\nexport class MoveFloorUp {\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[floor-toolbar] moveFloorUp';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor(public floorID: string) {\r\n    }\r\n}\r\n\r\nexport class MoveFloorDown{\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[floor-toolbar] moveFloorDown';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor(public floorID: string) {\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Default constructor, currently no parameters.</p>\n",
                "args": [
                    {
                        "name": "floorID",
                        "type": "string"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "floorID",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "floorID",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[floor-toolbar] makeRetail'",
                    "type": "string",
                    "optional": false,
                    "description": "<p>this is required by NGSX?? to identify the action</p>\n",
                    "line": 20,
                    "modifierKind": [
                        115,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MoveFloorDown",
            "id": "class-MoveFloorDown-17ecf986074464ae8416fd56dc06acbd",
            "file": "src/app/store/floor-toolbar.actions.ts",
            "type": "class",
            "sourceCode": "import { FloorInfo } from '../models/floor-info';\r\n\r\nexport class MakeResidential {\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[floor-toolbar] makeResidential';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor(public floorID: string) {\r\n    }\r\n}\r\n\r\nexport class MakeRetail {\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[floor-toolbar] makeRetail';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor(public floorID: string) {\r\n    }\r\n}\r\n\r\nexport class MakeRecreational {\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[floor-toolbar] makeRecreational';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor(public floorID: string) {\r\n    }\r\n}\r\n\r\nexport class MoveFloorUp {\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[floor-toolbar] moveFloorUp';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor(public floorID: string) {\r\n    }\r\n}\r\n\r\nexport class MoveFloorDown{\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[floor-toolbar] moveFloorDown';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor(public floorID: string) {\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Default constructor, currently no parameters.</p>\n",
                "args": [
                    {
                        "name": "floorID",
                        "type": "string"
                    }
                ],
                "line": 59,
                "jsdoctags": [
                    {
                        "name": "floorID",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "floorID",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[floor-toolbar] moveFloorDown'",
                    "type": "string",
                    "optional": false,
                    "description": "<p>this is required by NGSX?? to identify the action</p>\n",
                    "line": 59,
                    "modifierKind": [
                        115,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MoveFloorUp",
            "id": "class-MoveFloorUp-17ecf986074464ae8416fd56dc06acbd",
            "file": "src/app/store/floor-toolbar.actions.ts",
            "type": "class",
            "sourceCode": "import { FloorInfo } from '../models/floor-info';\r\n\r\nexport class MakeResidential {\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[floor-toolbar] makeResidential';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor(public floorID: string) {\r\n    }\r\n}\r\n\r\nexport class MakeRetail {\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[floor-toolbar] makeRetail';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor(public floorID: string) {\r\n    }\r\n}\r\n\r\nexport class MakeRecreational {\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[floor-toolbar] makeRecreational';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor(public floorID: string) {\r\n    }\r\n}\r\n\r\nexport class MoveFloorUp {\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[floor-toolbar] moveFloorUp';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor(public floorID: string) {\r\n    }\r\n}\r\n\r\nexport class MoveFloorDown{\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[floor-toolbar] moveFloorDown';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor(public floorID: string) {\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Default constructor, currently no parameters.</p>\n",
                "args": [
                    {
                        "name": "floorID",
                        "type": "string"
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "floorID",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "floorID",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[floor-toolbar] moveFloorUp'",
                    "type": "string",
                    "optional": false,
                    "description": "<p>this is required by NGSX?? to identify the action</p>\n",
                    "line": 46,
                    "modifierKind": [
                        115,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RecreationalFloors",
            "id": "class-RecreationalFloors-85a0fc7946f7d92b68e497a67b219d47",
            "file": "src/app/models/floors.ts",
            "type": "class",
            "sourceCode": "import { Floor } from './floor';\r\nimport { FloorInfo, RecreationFloorInfo, ResidentialFloorInfo, RetailFloorInfo } from './floor-info';\r\nimport { FloorType } from './floor-type.enum';\r\n\r\nexport abstract class Floors {\r\n  public floors: Array<FloorInfo> = [];\r\n\r\n  public randomFloor(\r\n    floorType: FloorType,\r\n    excludes: Array<Floor> = []\r\n  ): FloorInfo {\r\n    const IDs = excludes\r\n      .filter((floor) => floor.floorInfo.floorType === floorType)\r\n      .map((floor) => floor.floorInfo.floorId);\r\n    const floors = this.floors.filter(\r\n      (floorInfo: FloorInfo) => IDs.indexOf(floorInfo.floorId) < 0\r\n    );\r\n\r\n    if (!floors || floors.length <= 0) {\r\n      return null;\r\n    }\r\n\r\n    return floors[this.getRandom(0, floors.length)];\r\n  }\r\n\r\n  private getRandom(min: number, max: number): number {\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n  }\r\n}\r\n\r\nexport class AllFloors {\r\n  private static resFloors: Array<FloorInfo> = null;\r\n  private static retailFloors: Array<FloorInfo> = null;\r\n  private static recreationFloors: Array<FloorInfo> = null;\r\n\r\n  public static ResidentialFloors(): Array<FloorInfo> {\r\n    if (!this.resFloors) {\r\n      this.resFloors = [];\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 1'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 2'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 3'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 4'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 5'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 6'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 7'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 8'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 9'));\r\n    }\r\n\r\n    return this.resFloors;\r\n  }\r\n\r\n  public static RetailFloors(): Array<FloorInfo> {\r\n    if (!this.retailFloors) {\r\n      this.retailFloors = [];\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 1'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 2'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 3'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 4'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 5'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 6'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 7'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 8'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 9'));\r\n    }\r\n\r\n    return this.retailFloors;\r\n  }\r\n\r\n  public static RecreationalFloors(): Array<FloorInfo> {\r\n    if (!this.recreationFloors) {\r\n      this.recreationFloors = [];\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 1'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 2'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 3'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 4'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 5'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 6'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 7'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 8'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 9'));\r\n    }\r\n\r\n    return this.recreationFloors;\r\n  }\r\n}\r\n\r\nexport class ResidentialFloors extends Floors {\r\n  constructor() {\r\n    super();\r\n\r\n    this.floors = AllFloors.ResidentialFloors();\r\n\r\n  }\r\n}\r\n\r\nexport class RetailFloors extends Floors {\r\n  constructor() {\r\n    super();\r\n\r\n    this.floors = AllFloors.RetailFloors();\r\n  }\r\n\r\n}\r\n\r\nexport class RecreationalFloors extends Floors {\r\n  constructor() {\r\n    super();\r\n\r\n    this.floors = AllFloors.RecreationalFloors();\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 106
            },
            "properties": [
                {
                    "name": "floors",
                    "defaultValue": "[]",
                    "type": "Array<FloorInfo>",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "Floors"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getRandom",
                    "args": [
                        {
                            "name": "min",
                            "type": "number"
                        },
                        {
                            "name": "max",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "min",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Floors"
                    }
                },
                {
                    "name": "randomFloor",
                    "args": [
                        {
                            "name": "floorType",
                            "type": "FloorType"
                        },
                        {
                            "name": "excludes",
                            "type": "Array<Floor>",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "FloorInfo",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "floorType",
                            "type": "FloorType",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "excludes",
                            "type": "Array<Floor>",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Floors"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "Floors",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RecreationFloorInfo",
            "id": "class-RecreationFloorInfo-12fb243e6e97c2a8caea90bdbddd3c4a",
            "file": "src/app/models/floor-info.ts",
            "type": "class",
            "sourceCode": "import { Guid } from 'guid-typescript';\r\nimport { FloorSlot } from './floor-slot';\r\nimport { FloorType } from './floor-type.enum';\r\n\r\nexport interface IFloorInfo {\r\n    floorName: string;\r\n    floorType: FloorType;\r\n    slots: Array<FloorSlot>;\r\n}\r\n\r\nexport abstract class FloorInfo implements IFloorInfo {\r\n    floorId: string;\r\n    floorName: string;\r\n    floorType: FloorType;\r\n    slots: Array<FloorSlot>;\r\n    buildStart: number;\r\n\r\n    constructor(floorName: string, floorType: FloorType, slots: number) {\r\n        this.floorId = Guid.raw();\r\n        this.floorName = floorName;\r\n        this.floorType = floorType;\r\n        this.slots = [];\r\n        this.buildStart = 30000; // 30 seconds\r\n\r\n        for (let i = 0; i < slots; ++i) {\r\n            this.slots.push(new FloorSlot());\r\n        }\r\n    }\r\n\r\n    public tick(): void {\r\n        if (this.buildStart > 0) {\r\n            this.buildStart -= 1;\r\n        }\r\n    }\r\n}\r\n\r\nexport class LobbyFloorInfo extends FloorInfo {\r\n    constructor() {\r\n        super('Lobby', FloorType.Lobby, 0);\r\n        this.buildStart = 0;\r\n    }\r\n}\r\n\r\nexport class EmptyFloorInfo extends FloorInfo {\r\n    constructor() {\r\n        super('Empty floor', FloorType.Empty, 0);\r\n        this.buildStart = 0;\r\n    }\r\n}\r\n\r\nexport class ResidentialFloorInfo extends FloorInfo {\r\n    constructor(floorName: string) {\r\n        super(floorName, FloorType.Residential, 5);\r\n    }\r\n}\r\n\r\nexport class RetailFloorInfo extends FloorInfo {\r\n    constructor(floorName: string) {\r\n        super(floorName, FloorType.Retail, 3);\r\n    }\r\n}\r\n\r\nexport class RecreationFloorInfo extends FloorInfo {\r\n    constructor(floorName: string) {\r\n        super(floorName, FloorType.Recreational, 3);\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "floorName",
                        "type": "string"
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "floorName",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "buildStart",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                },
                {
                    "name": "floorId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                },
                {
                    "name": "floorName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                },
                {
                    "name": "floorType",
                    "type": "FloorType",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                },
                {
                    "name": "slots",
                    "type": "Array<FloorSlot>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                }
            ],
            "methods": [
                {
                    "name": "tick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "FloorInfo",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ResidentialFloorInfo",
            "id": "class-ResidentialFloorInfo-12fb243e6e97c2a8caea90bdbddd3c4a",
            "file": "src/app/models/floor-info.ts",
            "type": "class",
            "sourceCode": "import { Guid } from 'guid-typescript';\r\nimport { FloorSlot } from './floor-slot';\r\nimport { FloorType } from './floor-type.enum';\r\n\r\nexport interface IFloorInfo {\r\n    floorName: string;\r\n    floorType: FloorType;\r\n    slots: Array<FloorSlot>;\r\n}\r\n\r\nexport abstract class FloorInfo implements IFloorInfo {\r\n    floorId: string;\r\n    floorName: string;\r\n    floorType: FloorType;\r\n    slots: Array<FloorSlot>;\r\n    buildStart: number;\r\n\r\n    constructor(floorName: string, floorType: FloorType, slots: number) {\r\n        this.floorId = Guid.raw();\r\n        this.floorName = floorName;\r\n        this.floorType = floorType;\r\n        this.slots = [];\r\n        this.buildStart = 30000; // 30 seconds\r\n\r\n        for (let i = 0; i < slots; ++i) {\r\n            this.slots.push(new FloorSlot());\r\n        }\r\n    }\r\n\r\n    public tick(): void {\r\n        if (this.buildStart > 0) {\r\n            this.buildStart -= 1;\r\n        }\r\n    }\r\n}\r\n\r\nexport class LobbyFloorInfo extends FloorInfo {\r\n    constructor() {\r\n        super('Lobby', FloorType.Lobby, 0);\r\n        this.buildStart = 0;\r\n    }\r\n}\r\n\r\nexport class EmptyFloorInfo extends FloorInfo {\r\n    constructor() {\r\n        super('Empty floor', FloorType.Empty, 0);\r\n        this.buildStart = 0;\r\n    }\r\n}\r\n\r\nexport class ResidentialFloorInfo extends FloorInfo {\r\n    constructor(floorName: string) {\r\n        super(floorName, FloorType.Residential, 5);\r\n    }\r\n}\r\n\r\nexport class RetailFloorInfo extends FloorInfo {\r\n    constructor(floorName: string) {\r\n        super(floorName, FloorType.Retail, 3);\r\n    }\r\n}\r\n\r\nexport class RecreationFloorInfo extends FloorInfo {\r\n    constructor(floorName: string) {\r\n        super(floorName, FloorType.Recreational, 3);\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "floorName",
                        "type": "string"
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "floorName",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "buildStart",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                },
                {
                    "name": "floorId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                },
                {
                    "name": "floorName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                },
                {
                    "name": "floorType",
                    "type": "FloorType",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                },
                {
                    "name": "slots",
                    "type": "Array<FloorSlot>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                }
            ],
            "methods": [
                {
                    "name": "tick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "FloorInfo",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ResidentialFloors",
            "id": "class-ResidentialFloors-85a0fc7946f7d92b68e497a67b219d47",
            "file": "src/app/models/floors.ts",
            "type": "class",
            "sourceCode": "import { Floor } from './floor';\r\nimport { FloorInfo, RecreationFloorInfo, ResidentialFloorInfo, RetailFloorInfo } from './floor-info';\r\nimport { FloorType } from './floor-type.enum';\r\n\r\nexport abstract class Floors {\r\n  public floors: Array<FloorInfo> = [];\r\n\r\n  public randomFloor(\r\n    floorType: FloorType,\r\n    excludes: Array<Floor> = []\r\n  ): FloorInfo {\r\n    const IDs = excludes\r\n      .filter((floor) => floor.floorInfo.floorType === floorType)\r\n      .map((floor) => floor.floorInfo.floorId);\r\n    const floors = this.floors.filter(\r\n      (floorInfo: FloorInfo) => IDs.indexOf(floorInfo.floorId) < 0\r\n    );\r\n\r\n    if (!floors || floors.length <= 0) {\r\n      return null;\r\n    }\r\n\r\n    return floors[this.getRandom(0, floors.length)];\r\n  }\r\n\r\n  private getRandom(min: number, max: number): number {\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n  }\r\n}\r\n\r\nexport class AllFloors {\r\n  private static resFloors: Array<FloorInfo> = null;\r\n  private static retailFloors: Array<FloorInfo> = null;\r\n  private static recreationFloors: Array<FloorInfo> = null;\r\n\r\n  public static ResidentialFloors(): Array<FloorInfo> {\r\n    if (!this.resFloors) {\r\n      this.resFloors = [];\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 1'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 2'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 3'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 4'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 5'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 6'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 7'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 8'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 9'));\r\n    }\r\n\r\n    return this.resFloors;\r\n  }\r\n\r\n  public static RetailFloors(): Array<FloorInfo> {\r\n    if (!this.retailFloors) {\r\n      this.retailFloors = [];\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 1'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 2'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 3'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 4'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 5'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 6'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 7'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 8'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 9'));\r\n    }\r\n\r\n    return this.retailFloors;\r\n  }\r\n\r\n  public static RecreationalFloors(): Array<FloorInfo> {\r\n    if (!this.recreationFloors) {\r\n      this.recreationFloors = [];\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 1'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 2'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 3'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 4'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 5'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 6'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 7'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 8'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 9'));\r\n    }\r\n\r\n    return this.recreationFloors;\r\n  }\r\n}\r\n\r\nexport class ResidentialFloors extends Floors {\r\n  constructor() {\r\n    super();\r\n\r\n    this.floors = AllFloors.ResidentialFloors();\r\n\r\n  }\r\n}\r\n\r\nexport class RetailFloors extends Floors {\r\n  constructor() {\r\n    super();\r\n\r\n    this.floors = AllFloors.RetailFloors();\r\n  }\r\n\r\n}\r\n\r\nexport class RecreationalFloors extends Floors {\r\n  constructor() {\r\n    super();\r\n\r\n    this.floors = AllFloors.RecreationalFloors();\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 88
            },
            "properties": [
                {
                    "name": "floors",
                    "defaultValue": "[]",
                    "type": "Array<FloorInfo>",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "Floors"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getRandom",
                    "args": [
                        {
                            "name": "min",
                            "type": "number"
                        },
                        {
                            "name": "max",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "min",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Floors"
                    }
                },
                {
                    "name": "randomFloor",
                    "args": [
                        {
                            "name": "floorType",
                            "type": "FloorType"
                        },
                        {
                            "name": "excludes",
                            "type": "Array<Floor>",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "FloorInfo",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "floorType",
                            "type": "FloorType",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "excludes",
                            "type": "Array<Floor>",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Floors"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "Floors",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RetailFloorInfo",
            "id": "class-RetailFloorInfo-12fb243e6e97c2a8caea90bdbddd3c4a",
            "file": "src/app/models/floor-info.ts",
            "type": "class",
            "sourceCode": "import { Guid } from 'guid-typescript';\r\nimport { FloorSlot } from './floor-slot';\r\nimport { FloorType } from './floor-type.enum';\r\n\r\nexport interface IFloorInfo {\r\n    floorName: string;\r\n    floorType: FloorType;\r\n    slots: Array<FloorSlot>;\r\n}\r\n\r\nexport abstract class FloorInfo implements IFloorInfo {\r\n    floorId: string;\r\n    floorName: string;\r\n    floorType: FloorType;\r\n    slots: Array<FloorSlot>;\r\n    buildStart: number;\r\n\r\n    constructor(floorName: string, floorType: FloorType, slots: number) {\r\n        this.floorId = Guid.raw();\r\n        this.floorName = floorName;\r\n        this.floorType = floorType;\r\n        this.slots = [];\r\n        this.buildStart = 30000; // 30 seconds\r\n\r\n        for (let i = 0; i < slots; ++i) {\r\n            this.slots.push(new FloorSlot());\r\n        }\r\n    }\r\n\r\n    public tick(): void {\r\n        if (this.buildStart > 0) {\r\n            this.buildStart -= 1;\r\n        }\r\n    }\r\n}\r\n\r\nexport class LobbyFloorInfo extends FloorInfo {\r\n    constructor() {\r\n        super('Lobby', FloorType.Lobby, 0);\r\n        this.buildStart = 0;\r\n    }\r\n}\r\n\r\nexport class EmptyFloorInfo extends FloorInfo {\r\n    constructor() {\r\n        super('Empty floor', FloorType.Empty, 0);\r\n        this.buildStart = 0;\r\n    }\r\n}\r\n\r\nexport class ResidentialFloorInfo extends FloorInfo {\r\n    constructor(floorName: string) {\r\n        super(floorName, FloorType.Residential, 5);\r\n    }\r\n}\r\n\r\nexport class RetailFloorInfo extends FloorInfo {\r\n    constructor(floorName: string) {\r\n        super(floorName, FloorType.Retail, 3);\r\n    }\r\n}\r\n\r\nexport class RecreationFloorInfo extends FloorInfo {\r\n    constructor(floorName: string) {\r\n        super(floorName, FloorType.Recreational, 3);\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "floorName",
                        "type": "string"
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "floorName",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "buildStart",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                },
                {
                    "name": "floorId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                },
                {
                    "name": "floorName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                },
                {
                    "name": "floorType",
                    "type": "FloorType",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                },
                {
                    "name": "slots",
                    "type": "Array<FloorSlot>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                }
            ],
            "methods": [
                {
                    "name": "tick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "FloorInfo"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "FloorInfo",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RetailFloors",
            "id": "class-RetailFloors-85a0fc7946f7d92b68e497a67b219d47",
            "file": "src/app/models/floors.ts",
            "type": "class",
            "sourceCode": "import { Floor } from './floor';\r\nimport { FloorInfo, RecreationFloorInfo, ResidentialFloorInfo, RetailFloorInfo } from './floor-info';\r\nimport { FloorType } from './floor-type.enum';\r\n\r\nexport abstract class Floors {\r\n  public floors: Array<FloorInfo> = [];\r\n\r\n  public randomFloor(\r\n    floorType: FloorType,\r\n    excludes: Array<Floor> = []\r\n  ): FloorInfo {\r\n    const IDs = excludes\r\n      .filter((floor) => floor.floorInfo.floorType === floorType)\r\n      .map((floor) => floor.floorInfo.floorId);\r\n    const floors = this.floors.filter(\r\n      (floorInfo: FloorInfo) => IDs.indexOf(floorInfo.floorId) < 0\r\n    );\r\n\r\n    if (!floors || floors.length <= 0) {\r\n      return null;\r\n    }\r\n\r\n    return floors[this.getRandom(0, floors.length)];\r\n  }\r\n\r\n  private getRandom(min: number, max: number): number {\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n  }\r\n}\r\n\r\nexport class AllFloors {\r\n  private static resFloors: Array<FloorInfo> = null;\r\n  private static retailFloors: Array<FloorInfo> = null;\r\n  private static recreationFloors: Array<FloorInfo> = null;\r\n\r\n  public static ResidentialFloors(): Array<FloorInfo> {\r\n    if (!this.resFloors) {\r\n      this.resFloors = [];\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 1'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 2'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 3'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 4'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 5'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 6'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 7'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 8'));\r\n      this.resFloors.push(new ResidentialFloorInfo('Residential 9'));\r\n    }\r\n\r\n    return this.resFloors;\r\n  }\r\n\r\n  public static RetailFloors(): Array<FloorInfo> {\r\n    if (!this.retailFloors) {\r\n      this.retailFloors = [];\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 1'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 2'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 3'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 4'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 5'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 6'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 7'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 8'));\r\n      this.retailFloors.push(new RetailFloorInfo('Retail 9'));\r\n    }\r\n\r\n    return this.retailFloors;\r\n  }\r\n\r\n  public static RecreationalFloors(): Array<FloorInfo> {\r\n    if (!this.recreationFloors) {\r\n      this.recreationFloors = [];\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 1'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 2'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 3'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 4'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 5'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 6'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 7'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 8'));\r\n      this.recreationFloors.push(new RecreationFloorInfo('Recreation 9'));\r\n    }\r\n\r\n    return this.recreationFloors;\r\n  }\r\n}\r\n\r\nexport class ResidentialFloors extends Floors {\r\n  constructor() {\r\n    super();\r\n\r\n    this.floors = AllFloors.ResidentialFloors();\r\n\r\n  }\r\n}\r\n\r\nexport class RetailFloors extends Floors {\r\n  constructor() {\r\n    super();\r\n\r\n    this.floors = AllFloors.RetailFloors();\r\n  }\r\n\r\n}\r\n\r\nexport class RecreationalFloors extends Floors {\r\n  constructor() {\r\n    super();\r\n\r\n    this.floors = AllFloors.RecreationalFloors();\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 97
            },
            "properties": [
                {
                    "name": "floors",
                    "defaultValue": "[]",
                    "type": "Array<FloorInfo>",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "Floors"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getRandom",
                    "args": [
                        {
                            "name": "min",
                            "type": "number"
                        },
                        {
                            "name": "max",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "min",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Floors"
                    }
                },
                {
                    "name": "randomFloor",
                    "args": [
                        {
                            "name": "floorType",
                            "type": "FloorType"
                        },
                        {
                            "name": "excludes",
                            "type": "Array<Floor>",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "FloorInfo",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "floorType",
                            "type": "FloorType",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "excludes",
                            "type": "Array<Floor>",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "Floors"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "Floors",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TimerTick",
            "id": "class-TimerTick-74a0c69a7fbfb327eb77989f0032b8e2",
            "file": "src/app/store/tick.actions.ts",
            "type": "class",
            "sourceCode": "export class TimerTick {\r\n    /**\r\n     * this is required by NGSX?? to identify the action\r\n     */\r\n    static readonly type = '[timer] tick';\r\n\r\n    /**\r\n     * Default constructor, currently no parameters.\r\n     */\r\n    constructor() {\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Default constructor, currently no parameters.</p>\n",
                "args": [],
                "line": 5
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "'[timer] tick'",
                    "type": "string",
                    "optional": false,
                    "description": "<p>this is required by NGSX?? to identify the action</p>\n",
                    "line": 5,
                    "modifierKind": [
                        115,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-8d379600ff764e4fd14b4a3dfe2f0246",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "floors$",
                    "type": "Observable<Floor[]>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "Select",
                            "stringifiedArguments": "ApplicationState.getAllFloors"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Select } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { Floor } from './models/floor';\nimport { AppTimerService } from './services/app-timer/app-timer.service';\nimport { ApplicationState } from './store/app.state';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  constructor(timer: AppTimerService) {\n    timer.Timer$.subscribe(() => {});\n  }\n\n  @Select(ApplicationState.getAllFloors)\n  floors$: Observable<Floor[]>;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "timer",
                        "type": "AppTimerService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "timer",
                        "type": "AppTimerService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"container-fluid max-h\">\n  <app-toolbar ></app-toolbar>\n  <div class=\"row\" style=\"position: fixed;top: 80px;bottom: 80px;left: 0;right: 0;\">\n      <div class=\"col\">\n        <div>Floors</div>\n        <div class=\"\" style=\"overflow: auto\">\n          <app-floor *ngFor=\"let floor of floors$ | async\" [floor]=\"floor\"></app-floor>\n        </div>\n      </div>\n  </div>\n  <div class=\"row\">\n   <div class=\"col\">footer</div>\n  </div>\n</div>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "FloorComponent",
            "id": "component-FloorComponent-cd8bd3544abca39698f381b83e9b6408",
            "file": "src/app/components/floor/floor.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-floor",
            "styleUrls": [
                "./floor.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./floor.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "floor",
                    "line": 16,
                    "type": "Floor"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { Store } from '@ngxs/store';\nimport { Floor } from 'src/app/models/floor';\nimport { FloorInfo } from 'src/app/models/floor-info';\n\n@Component({\n  selector: 'app-floor',\n  templateUrl: './floor.component.html',\n  styleUrls: ['./floor.component.css']\n})\nexport class FloorComponent implements OnInit {\n\n  constructor(store: Store) { }\n\n  @Input()\n  floor: Floor;\n\n  ngOnInit(): void {\n\n  }\n\n  get FloorInfo(): FloorInfo {\n    return this.floor?.floorInfo;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./floor.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "FloorInfo": {
                    "name": "FloorInfo",
                    "getSignature": {
                        "name": "FloorInfo",
                        "type": "",
                        "returnType": "FloorInfo",
                        "line": 22
                    }
                }
            },
            "templateData": "<div class=\"d-flex flex-row p-2 border border-danger w-100\" style=\"height: 200px\">\n    <div class=\"d-flex flex-row justify-content-center mb-auto mt-auto\" style=\"width: 15%\">{{floor.ID}}</div>\n    <app-floor-detail [FloorInfo]=\"FloorInfo\" class=\"w-100 h-100\"></app-floor-detail>\n    <app-floor-toolbar [FloorID]=\"floor.floorID\" style=\"width: 15%\"></app-floor-toolbar>\n</div>\n"
        },
        {
            "name": "FloorDetailComponent",
            "id": "component-FloorDetailComponent-0f1dfb5e1495009fe268d5ac87f282d0",
            "file": "src/app/components/floor-detail/floor-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-floor-detail",
            "styleUrls": [
                "./floor-detail.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./floor-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "FloorInfo",
                    "description": "<p>FloorInfo input</p>\n",
                    "line": 21,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "floorInfo",
                    "defaultValue": "null",
                    "type": "FloorInfo",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "labelColor",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 61
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54
                },
                {
                    "name": "occupied",
                    "args": [
                        {
                            "name": "slot",
                            "type": "FloorSlot"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "slot",
                            "type": "FloorSlot",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>This is a detail floor component</p>\n",
            "rawdescription": "This is a detail floor component",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FloorInfo } from 'src/app/models/floor-info';\nimport { FloorSlot } from 'src/app/models/floor-slot';\nimport { FloorType } from 'src/app/models/floor-type.enum';\n/**\n * This is a detail floor component\n */\n@Component({\n  selector: 'app-floor-detail',\n  templateUrl: './floor-detail.component.html',\n  styleUrls: ['./floor-detail.component.css']\n})\nexport class FloorDetailComponent implements OnInit {\n\n  public floorInfo: FloorInfo = null;\n\n  /**\n   * FloorInfo input\n   */\n  @Input()\n  set FloorInfo(value: FloorInfo) {\n    this.floorInfo = value;\n  }\n\n  get isBuilding(): boolean {\n    return this.floorInfo?.buildStart !== 0;\n  }\n\n  get isNotBuilding(): boolean {\n    return this.floorInfo?.buildStart === 0;\n  }\n\n  get isLobby(): boolean {\n    if (this.floorInfo) {\n      return this.floorInfo.floorType === FloorType.Lobby;\n    }\n    return false;\n  }\n\n  get isEmpty(): boolean {\n    if (this.floorInfo) {\n      return this.floorInfo.floorType === FloorType.Empty;\n    }\n    return false;\n  }\n\n  get isBusy(): boolean {\n    return this.floorInfo?.buildStart !== 0;\n  }\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n  occupied(slot: FloorSlot): string {\n    return slot.occupied ? 'green' : 'gray';\n  }\n\n  labelColor(): string {\n    switch (this.floorInfo?.floorType) {\n      case FloorType.Retail: {\n        return 'magenta';\n      }\n      case FloorType.Residential: {\n        return 'lightgray';\n      }\n      case FloorType.Recreational: {\n        return 'yellow';\n      }\n      case FloorType.Food: {\n        return 'green';\n      }\n      case FloorType.Creative: {\n        return 'orange';\n      }\n      case FloorType.Service: {\n        return 'blue';\n      }\n      default: {\n        return 'white';\n      }\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./floor-detail.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 49
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "FloorInfo": {
                    "name": "FloorInfo",
                    "setSignature": {
                        "name": "FloorInfo",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 21,
                        "description": "<p>FloorInfo input</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "isBuilding": {
                    "name": "isBuilding",
                    "getSignature": {
                        "name": "isBuilding",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 25
                    }
                },
                "isNotBuilding": {
                    "name": "isNotBuilding",
                    "getSignature": {
                        "name": "isNotBuilding",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 29
                    }
                },
                "isLobby": {
                    "name": "isLobby",
                    "getSignature": {
                        "name": "isLobby",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 33
                    }
                },
                "isEmpty": {
                    "name": "isEmpty",
                    "getSignature": {
                        "name": "isEmpty",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 40
                    }
                },
                "isBusy": {
                    "name": "isBusy",
                    "getSignature": {
                        "name": "isBusy",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 47
                    }
                }
            },
            "templateData": "<div class=\"d-flex flex-column w-100 h-100 border\">\n    <div class=\"d-flex flex-row pr-2\" style=\"background-color: darkslategray;\">\n        <div class=\"d-flex flex-row justify-content-start\" style=\"min-width: 25%; max-width: 25%;\">\n            <div *ngFor=\"let slot of floorInfo?.slots\" class=\"m-1 p-2\" style=\"border-radius: 8px\" [style.background-color]=\"occupied(slot)\"></div>\n        </div>\n        \n        <div *ngIf=\"isBuilding\" class=\"flex-grow-1\" [style.color]=\"labelColor()\">Coming Soon...</div>\n        <div *ngIf=\"isNotBuilding\" class=\"flex-grow-1\" [style.color]=\"labelColor()\">{{floorInfo?.floorName}}</div>\n        <div *ngIf=\"!isLobby && !isEmpty && isBusy\" style=\"color: white;\">Time: {{floorInfo?.buildStart}}</div>\n    </div>\n    <div class=\"flex-grow-1\"></div>\n</div>\n"
        },
        {
            "name": "FloorToolbarComponent",
            "id": "component-FloorToolbarComponent-cd2355cf8aae0b137f5f82c687a8cb07",
            "file": "src/app/components/floor-toolbar/floor-toolbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-floor-toolbar",
            "styleUrls": [
                "./floor-toolbar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./floor-toolbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "FloorID",
                    "line": 25,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "floor",
                    "type": "Floor",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "floorCount",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "floorID",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "complete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                },
                {
                    "name": "makeCreative",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91
                },
                {
                    "name": "makeFood",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87
                },
                {
                    "name": "makeRecreational",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79
                },
                {
                    "name": "makeResidential",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75
                },
                {
                    "name": "makeRetail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71
                },
                {
                    "name": "makeService",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83
                },
                {
                    "name": "moveDown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99
                },
                {
                    "name": "moveUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { Store } from '@ngxs/store';\n\nimport {filter, switchMap, takeWhile, tap} from 'rxjs/operators';\nimport { Floor } from 'src/app/models/floor';\n\nimport { FloorType } from 'src/app/models/floor-type.enum';\nimport { ApplicationState } from 'src/app/store/app.state';\nimport { MakeRecreational, MakeResidential, MakeRetail, MoveFloorDown, MoveFloorUp } from 'src/app/store/floor-toolbar.actions';\n\n@Component({\n  selector: 'app-floor-toolbar',\n  templateUrl: './floor-toolbar.component.html',\n  styleUrls: ['./floor-toolbar.component.css']\n})\nexport class FloorToolbarComponent implements OnInit, OnDestroy {\n  private floorID: string;\n  private floor: Floor;\n  private destroy = false;\n  private floorCount = 0;\n\n  constructor(private store: Store) { }\n\n  @Input()\n  set FloorID(value: string) {\n    this.floorID = value;\n\n    this.store.select(ApplicationState.getAllFloors)\n      .pipe(\n        takeWhile(() => !this.destroy),\n        tap(val => this.floorCount = val.length),\n        switchMap(val => val),\n        filter(val => val.floorID === this.floorID)\n      )\n      .subscribe(val => {\n        this.floor = val;\n      });\n  }\n\n  ngOnInit(): void {\n  }\n\n  ngOnDestroy(): void {\n    this.destroy = true;\n  }\n\n  get isBuilding(): boolean {\n    return this.floor?.floorInfo?.buildStart !== 0;\n  }\n\n  get canGoUp(): boolean {\n    return this.floor?.ID - 1 <= 0;\n  }\n\n  get canGoDown(): boolean {\n    return this.floor?.ID + 1 >= this.floorCount;\n  }\n\n  get isEmptyFloor(): boolean {\n    return this.floor?.floorInfo?.floorType === FloorType.Empty;\n  }\n\n  get isNotLobby(): boolean {\n    return this.floor?.floorInfo?.floorType !== FloorType.Lobby;\n  }\n\n  complete(): void {\n    this.floor.complete();\n  }\n\n  makeRetail(): void {\n    this.store.dispatch(new MakeRetail(this.floorID));\n  }\n\n  makeResidential(): void {\n    this.store.dispatch(new MakeResidential(this.floorID));\n  }\n\n  makeRecreational(): void {\n    this.store.dispatch(new MakeRecreational(this.floorID));\n  }\n\n  makeService(): void {\n    this.store.dispatch(new MakeRecreational(this.floorID));\n  }\n\n  makeFood(): void {\n    this.store.dispatch(new MakeRecreational(this.floorID));\n  }\n\n  makeCreative(): void {\n    this.store.dispatch(new MakeRecreational(this.floorID));\n  }\n\n  moveUp(): void {\n    this.store.dispatch(new MoveFloorUp(this.floorID));\n  }\n\n  moveDown(): void {\n    this.store.dispatch(new MoveFloorDown(this.floorID));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./floor-toolbar.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "FloorID": {
                    "name": "FloorID",
                    "setSignature": {
                        "name": "FloorID",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 25,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "isBuilding": {
                    "name": "isBuilding",
                    "getSignature": {
                        "name": "isBuilding",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 47
                    }
                },
                "canGoUp": {
                    "name": "canGoUp",
                    "getSignature": {
                        "name": "canGoUp",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 51
                    }
                },
                "canGoDown": {
                    "name": "canGoDown",
                    "getSignature": {
                        "name": "canGoDown",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 55
                    }
                },
                "isEmptyFloor": {
                    "name": "isEmptyFloor",
                    "getSignature": {
                        "name": "isEmptyFloor",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 59
                    }
                },
                "isNotLobby": {
                    "name": "isNotLobby",
                    "getSignature": {
                        "name": "isNotLobby",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 63
                    }
                }
            },
            "templateData": "<div class=\"mx-1\">\n    <div *ngIf=\"isBuilding\">\n        <button class=\"btn btn-secondary m-1 flex-fill\" (click)=\"complete()\">Complete</button>\n    </div>\n    <div *ngIf=\"!isBuilding\">\n        <div *ngIf=\"isNotLobby\" class=\"d-flex flex-row\">\n            <button class=\"btn btn-secondary m-1 flex-fill\" (click)=\"moveUp()\" [class.disabled]=\"canGoUp\">^</button>\n            <button class=\"btn btn-secondary m-1 flex-fill\" (click)=\"moveDown()\" [class.disabled]=\"canGoDown\">v</button>\n        </div>\n        <div *ngIf=\"isEmptyFloor\" class=\"d-flex flex-row flex-wrap\">\n            <button class=\"btn btn-secondary m-1 flex-fill\" (click)=\"makeResidential()\">Res</button>\n            <button class=\"btn btn-secondary m-1 flex-fill\" (click)=\"makeRetail()\">Retail</button>\n            <button class=\"btn btn-secondary m-1 flex-fill\" (click)=\"makeRecreational()\">Rec</button>\n            <button class=\"btn btn-secondary m-1 flex-fill\" (click)=\"makeFood()\">Food</button>\n            <button class=\"btn btn-secondary m-1 flex-fill\" (click)=\"makeCreative()\">Creative</button>\n            <button class=\"btn btn-secondary m-1 flex-fill\" (click)=\"makeService()\">Service</button>\n        </div>\n        </div>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ToolbarComponent",
            "id": "component-ToolbarComponent-1f188567bf1c150cf644d06471505e4c",
            "file": "src/app/components/toolbar/toolbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-toolbar",
            "styleUrls": [
                "./toolbar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./toolbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "addFloor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngxs/store';\nimport { AddFloor } from 'src/app/store/toolbar.actions';\n\n@Component({\n  selector: 'app-toolbar',\n  templateUrl: './toolbar.component.html',\n  styleUrls: ['./toolbar.component.css']\n})\nexport class ToolbarComponent implements OnInit {\n\n  constructor(private store: Store) { }\n\n  ngOnInit(): void {\n  }\n\n  addFloor(): void {\n    this.store.dispatch(new AddFloor());\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./toolbar.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav class=\"bg-light navbar navbar-expand-lg navbar-light\">\n    <div class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n        <div class=\"navbar-nav\">\n          <a class=\"nav-link\" href=\"#\" (click)=\"addFloor()\">Add Floor</a>\n        </div>\n      </div>\n</nav>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AppTimerService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "FloorComponent"
                        },
                        {
                            "name": "FloorDetailComponent"
                        },
                        {
                            "name": "FloorToolbarComponent"
                        },
                        {
                            "name": "ToolbarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/floor-toolbar/stories/floor-toolbar.stories.ts",
                "type": "",
                "defaultValue": "EmptyTemplate.bind({})"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/floor-detail/stories/floor-detail.stories.ts",
                "type": "",
                "defaultValue": "EmptyTemplate.bind({})"
            },
            {
                "name": "EmptyTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/floor-toolbar/stories/floor-toolbar.stories.ts",
                "type": "Story<FloorToolbarComponent>",
                "defaultValue": "() => ({\r\n  component: FloorToolbarComponent,\r\n  // template: `<app-floor-toolbar [floorInfo]=\"floorInfo\"></app-floor-toolbar>`,\r\n})"
            },
            {
                "name": "EmptyTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/floor-detail/stories/floor-detail.stories.ts",
                "type": "Story<FloorDetailComponent>",
                "defaultValue": "() => ({\r\n  component: FloorDetailComponent,\r\n  // template: `<app-floor-detail [floorInfo]=\"floorInfo\"></app-floor-detail>`,\r\n})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "FloorType",
                "childs": [
                    {
                        "name": "Lobby"
                    },
                    {
                        "name": "Empty"
                    },
                    {
                        "name": "Residential"
                    },
                    {
                        "name": "Retail"
                    },
                    {
                        "name": "Recreational"
                    },
                    {
                        "name": "Food"
                    },
                    {
                        "name": "Creative"
                    },
                    {
                        "name": "Service"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/models/floor-type.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/app/components/floor-toolbar/stories/floor-toolbar.stories.ts": [
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/floor-toolbar/stories/floor-toolbar.stories.ts",
                    "type": "",
                    "defaultValue": "EmptyTemplate.bind({})"
                },
                {
                    "name": "EmptyTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/floor-toolbar/stories/floor-toolbar.stories.ts",
                    "type": "Story<FloorToolbarComponent>",
                    "defaultValue": "() => ({\r\n  component: FloorToolbarComponent,\r\n  // template: `<app-floor-toolbar [floorInfo]=\"floorInfo\"></app-floor-toolbar>`,\r\n})"
                }
            ],
            "src/app/components/floor-detail/stories/floor-detail.stories.ts": [
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/floor-detail/stories/floor-detail.stories.ts",
                    "type": "",
                    "defaultValue": "EmptyTemplate.bind({})"
                },
                {
                    "name": "EmptyTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/floor-detail/stories/floor-detail.stories.ts",
                    "type": "Story<FloorDetailComponent>",
                    "defaultValue": "() => ({\r\n  component: FloorDetailComponent,\r\n  // template: `<app-floor-detail [floorInfo]=\"floorInfo\"></app-floor-detail>`,\r\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/models/floor-type.enum.ts": [
                {
                    "name": "FloorType",
                    "childs": [
                        {
                            "name": "Lobby"
                        },
                        {
                            "name": "Empty"
                        },
                        {
                            "name": "Residential"
                        },
                        {
                            "name": "Retail"
                        },
                        {
                            "name": "Recreational"
                        },
                        {
                            "name": "Food"
                        },
                        {
                            "name": "Creative"
                        },
                        {
                            "name": "Service"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/models/floor-type.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 12,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/floor-detail/floor-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FloorDetailComponent",
                "coveragePercent": 28,
                "coverageCount": "2/7",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/floor-detail/stories/floor-detail.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/floor-detail/stories/floor-detail.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/floor-toolbar/floor-toolbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FloorToolbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/components/floor-toolbar/stories/floor-toolbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/floor-toolbar/stories/floor-toolbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/floor/floor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FloorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/toolbar/toolbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToolbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/floor-info.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EmptyFloorInfo",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/models/floor-info.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FloorInfo",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/models/floor-info.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LobbyFloorInfo",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/models/floor-info.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RecreationFloorInfo",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/models/floor-info.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ResidentialFloorInfo",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/models/floor-info.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RetailFloorInfo",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/models/floor-info.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFloorInfo",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/floor-slot.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FloorSlot",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/floor.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Floor",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/models/floors.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AllFloors",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/models/floors.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Floors",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/floors.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RecreationalFloors",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/floors.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ResidentialFloors",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/floors.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RetailFloors",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/app-timer/app-timer.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppTimerService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ApplicationStateModel",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "src/app/store/app.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApplicationState",
                "coveragePercent": 8,
                "coverageCount": "1/12",
                "status": "low"
            },
            {
                "filePath": "src/app/store/floor-toolbar.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MakeRecreational",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "src/app/store/floor-toolbar.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MakeResidential",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "src/app/store/floor-toolbar.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MakeRetail",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "src/app/store/floor-toolbar.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MoveFloorDown",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "src/app/store/floor-toolbar.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MoveFloorUp",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "src/app/store/tick.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TimerTick",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "src/app/store/toolbar.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddFloor",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}